/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MemosSyncPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  memosApiUrl: "",
  memosAccessToken: "",
  syncDirectory: "memos",
  syncFrequency: "manual",
  autoSyncInterval: 30,
  syncLimit: 1e3
};
var MemosSyncPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new MemosSyncSettingTab(this.app, this));
    this.addRibbonIcon("sync", "Sync Memos", async () => {
      await this.syncMemos();
    });
    if (this.settings.syncFrequency === "auto") {
      this.initializeAutoSync();
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  initializeAutoSync() {
    const interval = this.settings.autoSyncInterval * 60 * 1e3;
    setInterval(() => this.syncMemos(), interval);
  }
  async fetchAllMemos() {
    try {
      console.log("Fetching memos from:", this.settings.memosApiUrl);
      const allMemos = [];
      let pageToken;
      const pageSize = 100;
      while (allMemos.length < this.settings.syncLimit) {
        const url = new URL(`${this.settings.memosApiUrl}/memos`);
        url.searchParams.set("limit", pageSize.toString());
        url.searchParams.set("offset", "0");
        url.searchParams.set("rowStatus", "NORMAL");
        url.searchParams.set("orderBy", "createdTs");
        url.searchParams.set("orderDirection", "DESC");
        if (pageToken) {
          url.searchParams.set("pageToken", pageToken);
        }
        console.log("Fetching page with URL:", url.toString());
        const response = await fetch(url.toString(), {
          method: "GET",
          headers: {
            "Authorization": `Bearer ${this.settings.memosAccessToken}`,
            "Accept": "application/json"
          }
        });
        console.log("Response status:", response.status);
        const responseText = await response.text();
        console.log("Response text:", responseText);
        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}
Response: ${responseText}`);
        }
        let data;
        try {
          data = JSON.parse(responseText);
        } catch (e) {
          throw new Error(`Failed to parse JSON response: ${e.message}
Response: ${responseText}`);
        }
        if (!data.memos || !Array.isArray(data.memos)) {
          throw new Error(`Invalid response format: memos array not found
Response: ${responseText}`);
        }
        allMemos.push(...data.memos);
        console.log(`Fetched ${data.memos.length} memos, total: ${allMemos.length}`);
        if (!data.nextPageToken || allMemos.length >= this.settings.syncLimit) {
          break;
        }
        pageToken = data.nextPageToken;
      }
      const result = allMemos.slice(0, this.settings.syncLimit);
      console.log(`Returning ${result.length} memos after applying limit`);
      return result.sort(
        (a, b) => new Date(b.createTime).getTime() - new Date(a.createTime).getTime()
      );
    } catch (error) {
      if (error instanceof TypeError && error.message === "Failed to fetch") {
        throw new Error(`Network error: Unable to connect to ${this.settings.memosApiUrl}. Please check if the URL is correct and accessible.`);
      }
      throw error;
    }
  }
  sanitizeFileName(fileName) {
    return fileName.replace(/[\\/:*?"<>|#]/g, "_").replace(/\s+/g, " ").trim();
  }
  async saveMemoToFile(memo) {
    const date = new Date(memo.createTime);
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, "0");
    const yearDir = `${this.settings.syncDirectory}/${year}`;
    const monthDir = `${yearDir}/${month}`;
    await this.ensureDirectoryExists(yearDir);
    await this.ensureDirectoryExists(monthDir);
    const timeStr = date.toISOString().replace(/[:.]/g, "-").slice(0, 19);
    const contentPreview = memo.content ? this.sanitizeFileName(memo.content.slice(0, 20)) : this.sanitizeFileName(memo.name.replace("memos/", ""));
    const fileName = this.sanitizeFileName(`${timeStr} ${contentPreview}.md`);
    const filePath = `${monthDir}/${fileName}`;
    let content = memo.content || "";
    content = content.replace(/\#([^\#\s]+)\#/g, "#$1");
    if (memo.resources && memo.resources.length > 0) {
      content += "\n\n### Attachments\n";
      for (const resource of memo.resources) {
        content += `- [${resource.filename}](${this.settings.memosApiUrl.replace("/api/v1", "")}/o/r/${resource.name})
`;
      }
    }
    const tags = (memo.content || "").match(/\#([^\#\s]+)(?:\#|\s|$)/g) || [];
    const cleanTags = tags.map((tag) => tag.replace(/^\#|\#$/g, "").trim());
    const frontmatter = [
      "---",
      `id: ${memo.name}`,
      `created: ${memo.createTime}`,
      `updated: ${memo.updateTime}`,
      `visibility: ${memo.visibility}`,
      `type: memo`,
      cleanTags.length > 0 ? `tags: [${cleanTags.join(", ")}]` : "tags: []",
      "---",
      "",
      content
    ].filter((line) => line !== void 0).join("\n");
    try {
      const exists = await this.app.vault.adapter.exists(filePath);
      if (exists) {
        const file = this.app.vault.getAbstractFileByPath(filePath);
        if (file) {
          await this.app.vault.modify(file, frontmatter);
        }
      } else {
        await this.app.vault.create(filePath, frontmatter);
      }
    } catch (error) {
      console.error(`Failed to save memo to file: ${filePath}`, error);
      throw new Error(`Failed to save memo: ${error.message}`);
    }
  }
  async ensureDirectoryExists(dirPath) {
    const adapter = this.app.vault.adapter;
    if (!await adapter.exists(dirPath)) {
      await adapter.mkdir(dirPath);
    }
  }
  async syncMemos() {
    try {
      if (!this.settings.memosApiUrl) {
        throw new Error("Memos API URL is not configured");
      }
      if (!this.settings.memosAccessToken) {
        throw new Error("Memos Access Token is not configured");
      }
      this.displayMessage("Sync started");
      await this.ensureDirectoryExists(this.settings.syncDirectory);
      const memos = await this.fetchAllMemos();
      this.displayMessage(`Found ${memos.length} memos`);
      let syncCount = 0;
      for (const memo of memos) {
        await this.saveMemoToFile(memo);
        syncCount++;
      }
      this.displayMessage(`Successfully synced ${syncCount} memos`);
    } catch (error) {
      console.error("Sync failed:", error);
      this.displayMessage("Sync failed: " + error.message, true);
    }
  }
  displayMessage(message, isError = false) {
    new import_obsidian.Notice(message);
  }
};
var MemosSyncSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Memos API URL").setDesc("Enter your Memos API URL (e.g., https://your-memos-host/api/v1)").addText((text) => text.setPlaceholder("https://your-memos-host/api/v1").setValue(this.plugin.settings.memosApiUrl).onChange(async (value) => {
      let url = value.trim();
      if (url && !url.endsWith("/api/v1")) {
        url = url.replace(/\/?$/, "/api/v1");
        text.setValue(url);
      }
      this.plugin.settings.memosApiUrl = url;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Memos Access Token").setDesc("Enter your Memos Access Token").addText((text) => text.setPlaceholder("your-access-token").setValue(this.plugin.settings.memosAccessToken).onChange(async (value) => {
      this.plugin.settings.memosAccessToken = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Sync Directory").setDesc("Directory where memos will be synced").addText((text) => text.setPlaceholder("memos").setValue(this.plugin.settings.syncDirectory).onChange(async (value) => {
      this.plugin.settings.syncDirectory = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Sync Limit").setDesc("Maximum number of memos to sync (default: 1000)").addText((text) => text.setPlaceholder("1000").setValue(String(this.plugin.settings.syncLimit)).onChange(async (value) => {
      const numValue = parseInt(value);
      if (!isNaN(numValue) && numValue > 0) {
        this.plugin.settings.syncLimit = numValue;
        await this.plugin.saveSettings();
      }
    }));
    new import_obsidian.Setting(containerEl).setName("Sync Frequency").setDesc("Choose how often to sync").addDropdown((dropdown) => dropdown.addOption("manual", "Manual").addOption("auto", "Automatic").setValue(this.plugin.settings.syncFrequency).onChange(async (value) => {
      this.plugin.settings.syncFrequency = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Auto Sync Interval").setDesc("How often to sync (in minutes) when auto sync is enabled").addText((text) => text.setPlaceholder("30").setValue(String(this.plugin.settings.autoSyncInterval)).onChange(async (value) => {
      const numValue = parseInt(value);
      if (!isNaN(numValue) && numValue > 0) {
        this.plugin.settings.autoSyncInterval = numValue;
        await this.plugin.saveSettings();
      }
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
