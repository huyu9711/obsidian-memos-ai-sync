/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MemosSyncPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  memosApiUrl: "",
  syncDirectory: "memos",
  syncFrequency: "manual",
  autoSyncInterval: 30
};
var MemosSyncPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new MemosSyncSettingTab(this.app, this));
    this.addRibbonIcon("sync", "Sync Memos", async () => {
      await this.syncMemos();
    });
    if (this.settings.syncFrequency === "auto") {
      this.initializeAutoSync();
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  initializeAutoSync() {
    const interval = this.settings.autoSyncInterval * 60 * 1e3;
    setInterval(() => this.syncMemos(), interval);
  }
  async syncMemos() {
    try {
      await this.ensureSyncDirectoryExists();
      this.displayMessage("Sync started");
    } catch (error) {
      console.error("Sync failed:", error);
      this.displayMessage("Sync failed: " + error.message, true);
    }
  }
  async ensureSyncDirectoryExists() {
    const adapter = this.app.vault.adapter;
    const dirPath = this.settings.syncDirectory;
    if (!await adapter.exists(dirPath)) {
      await adapter.mkdir(dirPath);
    }
  }
  displayMessage(message, isError = false) {
    new import_obsidian.Notice(message);
  }
};
var MemosSyncSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Memos API URL").setDesc("Enter your Memos API URL").addText((text) => text.setPlaceholder("https://your-memos-instance/api").setValue(this.plugin.settings.memosApiUrl).onChange(async (value) => {
      this.plugin.settings.memosApiUrl = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Sync Directory").setDesc("Directory where memos will be synced").addText((text) => text.setPlaceholder("memos").setValue(this.plugin.settings.syncDirectory).onChange(async (value) => {
      this.plugin.settings.syncDirectory = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Sync Frequency").setDesc("Choose how often to sync").addDropdown((dropdown) => dropdown.addOption("manual", "Manual").addOption("auto", "Automatic").setValue(this.plugin.settings.syncFrequency).onChange(async (value) => {
      this.plugin.settings.syncFrequency = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Auto Sync Interval").setDesc("How often to sync (in minutes) when auto sync is enabled").addText((text) => text.setPlaceholder("30").setValue(String(this.plugin.settings.autoSyncInterval)).onChange(async (value) => {
      const numValue = parseInt(value);
      if (!isNaN(numValue) && numValue > 0) {
        this.plugin.settings.autoSyncInterval = numValue;
        await this.plugin.saveSettings();
      }
    }));
  }
};
