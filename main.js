/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MemosSyncPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  memosApiUrl: "",
  memosAccessToken: "",
  syncDirectory: "memos",
  syncFrequency: "manual",
  autoSyncInterval: 30
};
var MemosSyncPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new MemosSyncSettingTab(this.app, this));
    this.addRibbonIcon("sync", "Sync Memos", async () => {
      await this.syncMemos();
    });
    if (this.settings.syncFrequency === "auto") {
      this.initializeAutoSync();
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  initializeAutoSync() {
    const interval = this.settings.autoSyncInterval * 60 * 1e3;
    setInterval(() => this.syncMemos(), interval);
  }
  async fetchMemos() {
    try {
      console.log("Fetching memos from:", this.settings.memosApiUrl);
      const response = await fetch(`${this.settings.memosApiUrl}/memos?limit=1000&orderBy=created_ts&orderDirection=DESC`, {
        method: "GET",
        headers: {
          "Authorization": `Bearer ${this.settings.memosAccessToken}`,
          "Accept": "application/json"
        }
      });
      console.log("Response status:", response.status);
      const responseText = await response.text();
      console.log("Response text:", responseText);
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}
Response: ${responseText}`);
      }
      let data;
      try {
        data = JSON.parse(responseText);
      } catch (e) {
        throw new Error(`Failed to parse JSON response: ${e.message}
Response: ${responseText}`);
      }
      return data.memos.sort(
        (a, b) => new Date(b.createTime).getTime() - new Date(a.createTime).getTime()
      );
    } catch (error) {
      if (error instanceof TypeError && error.message === "Failed to fetch") {
        throw new Error(`Network error: Unable to connect to ${this.settings.memosApiUrl}. Please check if the URL is correct and accessible.`);
      }
      throw error;
    }
  }
  async saveMemoToFile(memo) {
    const date = new Date(memo.createTime);
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, "0");
    const yearDir = `${this.settings.syncDirectory}/${year}`;
    const monthDir = `${yearDir}/${month}`;
    await this.ensureDirectoryExists(yearDir);
    await this.ensureDirectoryExists(monthDir);
    const timeStr = date.toISOString().replace(/[:.]/g, "-").slice(0, 19);
    const contentPreview = memo.content ? memo.content.slice(0, 20).replace(/[\\/:*?"<>|]/g, "_").trim() : memo.name.replace("memos/", "");
    const fileName = `${timeStr} ${contentPreview}.md`;
    const filePath = `${monthDir}/${fileName}`;
    let content = memo.content || "";
    if (memo.resources && memo.resources.length > 0) {
      content += "\n\n### Attachments\n";
      for (const resource of memo.resources) {
        content += `- [${resource.filename}](${this.settings.memosApiUrl.replace("/api/v1", "")}/o/r/${resource.name})
`;
      }
    }
    const frontmatter = [
      "---",
      `id: ${memo.name}`,
      `created: ${memo.createTime}`,
      `updated: ${memo.updateTime}`,
      `visibility: ${memo.visibility}`,
      `type: memo`,
      memo.tags && memo.tags.length > 0 ? `tags: [${memo.tags.join(", ")}]` : "tags: []",
      "---",
      "",
      content
    ].filter((line) => line !== void 0).join("\n");
    const exists = await this.app.vault.adapter.exists(filePath);
    if (exists) {
      const file = this.app.vault.getAbstractFileByPath(filePath);
      if (file) {
        await this.app.vault.modify(file, frontmatter);
      }
    } else {
      await this.app.vault.create(filePath, frontmatter);
    }
  }
  async ensureDirectoryExists(dirPath) {
    const adapter = this.app.vault.adapter;
    if (!await adapter.exists(dirPath)) {
      await adapter.mkdir(dirPath);
    }
  }
  async syncMemos() {
    try {
      if (!this.settings.memosApiUrl) {
        throw new Error("Memos API URL is not configured");
      }
      if (!this.settings.memosAccessToken) {
        throw new Error("Memos Access Token is not configured");
      }
      this.displayMessage("Sync started");
      await this.ensureDirectoryExists(this.settings.syncDirectory);
      const memos = await this.fetchMemos();
      this.displayMessage(`Found ${memos.length} memos`);
      let syncCount = 0;
      for (const memo of memos) {
        await this.saveMemoToFile(memo);
        syncCount++;
      }
      this.displayMessage(`Successfully synced ${syncCount} memos`);
    } catch (error) {
      console.error("Sync failed:", error);
      this.displayMessage("Sync failed: " + error.message, true);
    }
  }
  displayMessage(message, isError = false) {
    new import_obsidian.Notice(message);
  }
};
var MemosSyncSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Memos API URL").setDesc("Enter your Memos API URL (e.g., https://your-memos-host/api/v1)").addText((text) => text.setPlaceholder("https://your-memos-host/api/v1").setValue(this.plugin.settings.memosApiUrl).onChange(async (value) => {
      let url = value.trim();
      if (url && !url.endsWith("/api/v1")) {
        url = url.replace(/\/?$/, "/api/v1");
        text.setValue(url);
      }
      this.plugin.settings.memosApiUrl = url;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Memos Access Token").setDesc("Enter your Memos Access Token").addText((text) => text.setPlaceholder("your-access-token").setValue(this.plugin.settings.memosAccessToken).onChange(async (value) => {
      this.plugin.settings.memosAccessToken = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Sync Directory").setDesc("Directory where memos will be synced").addText((text) => text.setPlaceholder("memos").setValue(this.plugin.settings.syncDirectory).onChange(async (value) => {
      this.plugin.settings.syncDirectory = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Sync Frequency").setDesc("Choose how often to sync").addDropdown((dropdown) => dropdown.addOption("manual", "Manual").addOption("auto", "Automatic").setValue(this.plugin.settings.syncFrequency).onChange(async (value) => {
      this.plugin.settings.syncFrequency = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Auto Sync Interval").setDesc("How often to sync (in minutes) when auto sync is enabled").addText((text) => text.setPlaceholder("30").setValue(String(this.plugin.settings.autoSyncInterval)).onChange(async (value) => {
      const numValue = parseInt(value);
      if (!isNaN(numValue) && numValue > 0) {
        this.plugin.settings.autoSyncInterval = numValue;
        await this.plugin.saveSettings();
      }
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBQbHVnaW4sIFBsdWdpblNldHRpbmdUYWIsIFNldHRpbmcsIE5vdGljZSwgVEZpbGUgfSBmcm9tICdvYnNpZGlhbic7XG5cbmludGVyZmFjZSBNZW1vSXRlbSB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHVpZDogc3RyaW5nO1xuICAgIGNvbnRlbnQ6IHN0cmluZztcbiAgICB2aXNpYmlsaXR5OiBzdHJpbmc7XG4gICAgY3JlYXRlVGltZTogc3RyaW5nO1xuICAgIHVwZGF0ZVRpbWU6IHN0cmluZztcbiAgICBkaXNwbGF5VGltZTogc3RyaW5nO1xuICAgIGNyZWF0b3I6IHN0cmluZztcbiAgICByb3dTdGF0dXM6IHN0cmluZztcbiAgICBwaW5uZWQ6IGJvb2xlYW47XG4gICAgcmVzb3VyY2VzOiBBcnJheTx7XG4gICAgICAgIG5hbWU6IHN0cmluZztcbiAgICAgICAgdWlkOiBzdHJpbmc7XG4gICAgICAgIGZpbGVuYW1lOiBzdHJpbmc7XG4gICAgICAgIHR5cGU6IHN0cmluZztcbiAgICAgICAgc2l6ZTogc3RyaW5nO1xuICAgICAgICBjcmVhdGVUaW1lOiBzdHJpbmc7XG4gICAgfT47XG4gICAgdGFnczogc3RyaW5nW107XG59XG5cbmludGVyZmFjZSBNZW1vc1Jlc3BvbnNlIHtcbiAgICBtZW1vczogTWVtb0l0ZW1bXTtcbn1cblxuaW50ZXJmYWNlIE1lbW9zUGx1Z2luU2V0dGluZ3Mge1xuICAgIG1lbW9zQXBpVXJsOiBzdHJpbmc7XG4gICAgbWVtb3NBY2Nlc3NUb2tlbjogc3RyaW5nO1xuICAgIHN5bmNEaXJlY3Rvcnk6IHN0cmluZztcbiAgICBzeW5jRnJlcXVlbmN5OiAnbWFudWFsJyB8ICdhdXRvJztcbiAgICBhdXRvU3luY0ludGVydmFsOiBudW1iZXI7XG59XG5cbmNvbnN0IERFRkFVTFRfU0VUVElOR1M6IE1lbW9zUGx1Z2luU2V0dGluZ3MgPSB7XG4gICAgbWVtb3NBcGlVcmw6ICcnLFxuICAgIG1lbW9zQWNjZXNzVG9rZW46ICcnLFxuICAgIHN5bmNEaXJlY3Rvcnk6ICdtZW1vcycsXG4gICAgc3luY0ZyZXF1ZW5jeTogJ21hbnVhbCcsXG4gICAgYXV0b1N5bmNJbnRlcnZhbDogMzBcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWVtb3NTeW5jUGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcbiAgICBzZXR0aW5nczogTWVtb3NQbHVnaW5TZXR0aW5ncztcblxuICAgIGFzeW5jIG9ubG9hZCgpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcblxuICAgICAgICB0aGlzLmFkZFNldHRpbmdUYWIobmV3IE1lbW9zU3luY1NldHRpbmdUYWIodGhpcy5hcHAsIHRoaXMpKTtcblxuICAgICAgICB0aGlzLmFkZFJpYmJvbkljb24oJ3N5bmMnLCAnU3luYyBNZW1vcycsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuc3luY01lbW9zKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLnN5bmNGcmVxdWVuY3kgPT09ICdhdXRvJykge1xuICAgICAgICAgICAgdGhpcy5pbml0aWFsaXplQXV0b1N5bmMoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGxvYWRTZXR0aW5ncygpIHtcbiAgICAgICAgdGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfU0VUVElOR1MsIGF3YWl0IHRoaXMubG9hZERhdGEoKSk7XG4gICAgfVxuXG4gICAgYXN5bmMgc2F2ZVNldHRpbmdzKCkge1xuICAgICAgICBhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaW5pdGlhbGl6ZUF1dG9TeW5jKCkge1xuICAgICAgICBjb25zdCBpbnRlcnZhbCA9IHRoaXMuc2V0dGluZ3MuYXV0b1N5bmNJbnRlcnZhbCAqIDYwICogMTAwMDtcbiAgICAgICAgc2V0SW50ZXJ2YWwoKCkgPT4gdGhpcy5zeW5jTWVtb3MoKSwgaW50ZXJ2YWwpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgZmV0Y2hNZW1vcygpOiBQcm9taXNlPE1lbW9JdGVtW10+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdGZXRjaGluZyBtZW1vcyBmcm9tOicsIHRoaXMuc2V0dGluZ3MubWVtb3NBcGlVcmwpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBcdTgzQjdcdTUzRDZcdTYyNDBcdTY3MDkgbWVtb3NcdUZGMENcdTYzMDlcdTUyMUJcdTVFRkFcdTY1RjZcdTk1RjRcdTUwMTJcdTVFOEZcdTYzOTJcdTUyMTdcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7dGhpcy5zZXR0aW5ncy5tZW1vc0FwaVVybH0vbWVtb3M/bGltaXQ9MTAwMCZvcmRlckJ5PWNyZWF0ZWRfdHMmb3JkZXJEaXJlY3Rpb249REVTQ2AsIHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgQmVhcmVyICR7dGhpcy5zZXR0aW5ncy5tZW1vc0FjY2Vzc1Rva2VufWAsXG4gICAgICAgICAgICAgICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgY29uc29sZS5sb2coJ1Jlc3BvbnNlIHN0YXR1czonLCByZXNwb25zZS5zdGF0dXMpO1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2VUZXh0ID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1Jlc3BvbnNlIHRleHQ6JywgcmVzcG9uc2VUZXh0KTtcblxuICAgICAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSFRUUCAke3Jlc3BvbnNlLnN0YXR1c306ICR7cmVzcG9uc2Uuc3RhdHVzVGV4dH1cXG5SZXNwb25zZTogJHtyZXNwb25zZVRleHR9YCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBkYXRhOiBNZW1vc1Jlc3BvbnNlO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBkYXRhID0gSlNPTi5wYXJzZShyZXNwb25zZVRleHQpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIHBhcnNlIEpTT04gcmVzcG9uc2U6ICR7ZS5tZXNzYWdlfVxcblJlc3BvbnNlOiAke3Jlc3BvbnNlVGV4dH1gKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gXHU3ODZFXHU0RkREXHU2MzA5XHU1MjFCXHU1RUZBXHU2NUY2XHU5NUY0XHU1MDEyXHU1RThGXHU2MzkyXHU1RThGXHVGRjA4XHU0RUU1XHU5NjMyIEFQSSBcdTYzOTJcdTVFOEZcdTRFMERcdTc1MUZcdTY1NDhcdUZGMDlcbiAgICAgICAgICAgIHJldHVybiBkYXRhLm1lbW9zLnNvcnQoKGEsIGIpID0+IFxuICAgICAgICAgICAgICAgIG5ldyBEYXRlKGIuY3JlYXRlVGltZSkuZ2V0VGltZSgpIC0gbmV3IERhdGUoYS5jcmVhdGVUaW1lKS5nZXRUaW1lKClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBUeXBlRXJyb3IgJiYgZXJyb3IubWVzc2FnZSA9PT0gJ0ZhaWxlZCB0byBmZXRjaCcpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE5ldHdvcmsgZXJyb3I6IFVuYWJsZSB0byBjb25uZWN0IHRvICR7dGhpcy5zZXR0aW5ncy5tZW1vc0FwaVVybH0uIFBsZWFzZSBjaGVjayBpZiB0aGUgVVJMIGlzIGNvcnJlY3QgYW5kIGFjY2Vzc2libGUuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgc2F2ZU1lbW9Ub0ZpbGUobWVtbzogTWVtb0l0ZW0pIHtcbiAgICAgICAgLy8gXHU0RjdGXHU3NTI4XHU1MjFCXHU1RUZBXHU2NUY2XHU5NUY0XHU0RjVDXHU0RTNBXHU2NTg3XHU0RUY2XHU1NDBEXHU3Njg0XHU0RTAwXHU5MEU4XHU1MjA2XG4gICAgICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZShtZW1vLmNyZWF0ZVRpbWUpO1xuICAgICAgICBjb25zdCB5ZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpO1xuICAgICAgICBjb25zdCBtb250aCA9IFN0cmluZyhkYXRlLmdldE1vbnRoKCkgKyAxKS5wYWRTdGFydCgyLCAnMCcpO1xuICAgICAgICBcbiAgICAgICAgLy8gXHU1MjFCXHU1RUZBXHU1RTc0XHU2NzA4XHU3NkVFXHU1RjU1XHU3RUQzXHU2Nzg0XG4gICAgICAgIGNvbnN0IHllYXJEaXIgPSBgJHt0aGlzLnNldHRpbmdzLnN5bmNEaXJlY3Rvcnl9LyR7eWVhcn1gO1xuICAgICAgICBjb25zdCBtb250aERpciA9IGAke3llYXJEaXJ9LyR7bW9udGh9YDtcbiAgICAgICAgXG4gICAgICAgIC8vIFx1Nzg2RVx1NEZERFx1NzZFRVx1NUY1NVx1NUI1OFx1NTcyOFxuICAgICAgICBhd2FpdCB0aGlzLmVuc3VyZURpcmVjdG9yeUV4aXN0cyh5ZWFyRGlyKTtcbiAgICAgICAgYXdhaXQgdGhpcy5lbnN1cmVEaXJlY3RvcnlFeGlzdHMobW9udGhEaXIpO1xuICAgICAgICBcbiAgICAgICAgLy8gXHU0RjdGXHU3NTI4XHU1MjFCXHU1RUZBXHU2NUY2XHU5NUY0XHU1NDhDXHU1MTg1XHU1QkI5XHU1MjREMjBcdTRFMkFcdTVCNTdcdTdCMjZcdUZGMDhcdTU5ODJcdTY3OUNcdTY3MDlcdUZGMDlcdTRGNUNcdTRFM0FcdTY1ODdcdTRFRjZcdTU0MERcbiAgICAgICAgY29uc3QgdGltZVN0ciA9IGRhdGUudG9JU09TdHJpbmcoKS5yZXBsYWNlKC9bOi5dL2csICctJykuc2xpY2UoMCwgMTkpO1xuICAgICAgICBjb25zdCBjb250ZW50UHJldmlldyA9IG1lbW8uY29udGVudCBcbiAgICAgICAgICAgID8gbWVtby5jb250ZW50LnNsaWNlKDAsIDIwKS5yZXBsYWNlKC9bXFxcXC86Kj9cIjw+fF0vZywgJ18nKS50cmltKCkgXG4gICAgICAgICAgICA6IG1lbW8ubmFtZS5yZXBsYWNlKCdtZW1vcy8nLCAnJyk7XG4gICAgICAgIGNvbnN0IGZpbGVOYW1lID0gYCR7dGltZVN0cn0gJHtjb250ZW50UHJldmlld30ubWRgO1xuICAgICAgICBjb25zdCBmaWxlUGF0aCA9IGAke21vbnRoRGlyfS8ke2ZpbGVOYW1lfWA7XG4gICAgICAgIFxuICAgICAgICAvLyBcdTY3ODRcdTVFRkEgTWFya2Rvd24gXHU1MTg1XHU1QkI5XG4gICAgICAgIGxldCBjb250ZW50ID0gbWVtby5jb250ZW50IHx8ICcnO1xuICAgICAgICBcbiAgICAgICAgLy8gXHU1OTgyXHU2NzlDXHU2NzA5XHU4RDQ0XHU2RTkwXHU2NTg3XHU0RUY2XHVGRjBDXHU2REZCXHU1MkEwXHU4RDQ0XHU2RTkwXHU5NEZFXHU2M0E1XG4gICAgICAgIGlmIChtZW1vLnJlc291cmNlcyAmJiBtZW1vLnJlc291cmNlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb250ZW50ICs9ICdcXG5cXG4jIyMgQXR0YWNobWVudHNcXG4nO1xuICAgICAgICAgICAgZm9yIChjb25zdCByZXNvdXJjZSBvZiBtZW1vLnJlc291cmNlcykge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQgKz0gYC0gWyR7cmVzb3VyY2UuZmlsZW5hbWV9XSgke3RoaXMuc2V0dGluZ3MubWVtb3NBcGlVcmwucmVwbGFjZSgnL2FwaS92MScsICcnKX0vby9yLyR7cmVzb3VyY2UubmFtZX0pXFxuYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gXHU2REZCXHU1MkEwIGZyb250bWF0dGVyXG4gICAgICAgIGNvbnN0IGZyb250bWF0dGVyID0gW1xuICAgICAgICAgICAgJy0tLScsXG4gICAgICAgICAgICBgaWQ6ICR7bWVtby5uYW1lfWAsXG4gICAgICAgICAgICBgY3JlYXRlZDogJHttZW1vLmNyZWF0ZVRpbWV9YCxcbiAgICAgICAgICAgIGB1cGRhdGVkOiAke21lbW8udXBkYXRlVGltZX1gLFxuICAgICAgICAgICAgYHZpc2liaWxpdHk6ICR7bWVtby52aXNpYmlsaXR5fWAsXG4gICAgICAgICAgICBgdHlwZTogbWVtb2AsXG4gICAgICAgICAgICBtZW1vLnRhZ3MgJiYgbWVtby50YWdzLmxlbmd0aCA+IDAgPyBgdGFnczogWyR7bWVtby50YWdzLmpvaW4oJywgJyl9XWAgOiAndGFnczogW10nLFxuICAgICAgICAgICAgJy0tLScsXG4gICAgICAgICAgICAnJyxcbiAgICAgICAgICAgIGNvbnRlbnRcbiAgICAgICAgXS5maWx0ZXIobGluZSA9PiBsaW5lICE9PSB1bmRlZmluZWQpLmpvaW4oJ1xcbicpO1xuXG4gICAgICAgIC8vIFx1NjhDMFx1NjdFNVx1NjU4N1x1NEVGNlx1NjYyRlx1NTQyNlx1NURGMlx1NUI1OFx1NTcyOFxuICAgICAgICBjb25zdCBleGlzdHMgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5hZGFwdGVyLmV4aXN0cyhmaWxlUGF0aCk7XG4gICAgICAgIGlmIChleGlzdHMpIHtcbiAgICAgICAgICAgIC8vIFx1ODNCN1x1NTNENlx1NzNCMFx1NjcwOVx1NjU4N1x1NEVGNlxuICAgICAgICAgICAgY29uc3QgZmlsZSA9IHRoaXMuYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChmaWxlUGF0aCkgYXMgVEZpbGU7XG4gICAgICAgICAgICBpZiAoZmlsZSkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYXBwLnZhdWx0Lm1vZGlmeShmaWxlLCBmcm9udG1hdHRlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBcdTUyMUJcdTVFRkFcdTY1QjBcdTY1ODdcdTRFRjZcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYXBwLnZhdWx0LmNyZWF0ZShmaWxlUGF0aCwgZnJvbnRtYXR0ZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBlbnN1cmVEaXJlY3RvcnlFeGlzdHMoZGlyUGF0aDogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IGFkYXB0ZXIgPSB0aGlzLmFwcC52YXVsdC5hZGFwdGVyO1xuICAgICAgICBpZiAoIShhd2FpdCBhZGFwdGVyLmV4aXN0cyhkaXJQYXRoKSkpIHtcbiAgICAgICAgICAgIGF3YWl0IGFkYXB0ZXIubWtkaXIoZGlyUGF0aCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyBzeW5jTWVtb3MoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuc2V0dGluZ3MubWVtb3NBcGlVcmwpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01lbW9zIEFQSSBVUkwgaXMgbm90IGNvbmZpZ3VyZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy5zZXR0aW5ncy5tZW1vc0FjY2Vzc1Rva2VuKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNZW1vcyBBY2Nlc3MgVG9rZW4gaXMgbm90IGNvbmZpZ3VyZWQnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5kaXNwbGF5TWVzc2FnZSgnU3luYyBzdGFydGVkJyk7XG5cbiAgICAgICAgICAgIC8vIFx1Nzg2RVx1NEZERFx1NTQwQ1x1NkI2NVx1NzZFRVx1NUY1NVx1NUI1OFx1NTcyOFxuICAgICAgICAgICAgYXdhaXQgdGhpcy5lbnN1cmVEaXJlY3RvcnlFeGlzdHModGhpcy5zZXR0aW5ncy5zeW5jRGlyZWN0b3J5KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gXHU4M0I3XHU1M0Q2XHU2MjQwXHU2NzA5IG1lbW9zXG4gICAgICAgICAgICBjb25zdCBtZW1vcyA9IGF3YWl0IHRoaXMuZmV0Y2hNZW1vcygpO1xuICAgICAgICAgICAgdGhpcy5kaXNwbGF5TWVzc2FnZShgRm91bmQgJHttZW1vcy5sZW5ndGh9IG1lbW9zYCk7XG5cbiAgICAgICAgICAgIC8vIFx1NTQwQ1x1NkI2NVx1NkJDRlx1NEUyQSBtZW1vXG4gICAgICAgICAgICBsZXQgc3luY0NvdW50ID0gMDtcbiAgICAgICAgICAgIGZvciAoY29uc3QgbWVtbyBvZiBtZW1vcykge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuc2F2ZU1lbW9Ub0ZpbGUobWVtbyk7XG4gICAgICAgICAgICAgICAgc3luY0NvdW50Kys7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuZGlzcGxheU1lc3NhZ2UoYFN1Y2Nlc3NmdWxseSBzeW5jZWQgJHtzeW5jQ291bnR9IG1lbW9zYCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdTeW5jIGZhaWxlZDonLCBlcnJvcik7XG4gICAgICAgICAgICB0aGlzLmRpc3BsYXlNZXNzYWdlKCdTeW5jIGZhaWxlZDogJyArIGVycm9yLm1lc3NhZ2UsIHRydWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBkaXNwbGF5TWVzc2FnZShtZXNzYWdlOiBzdHJpbmcsIGlzRXJyb3IgPSBmYWxzZSkge1xuICAgICAgICBuZXcgTm90aWNlKG1lc3NhZ2UpO1xuICAgIH1cbn1cblxuY2xhc3MgTWVtb3NTeW5jU2V0dGluZ1RhYiBleHRlbmRzIFBsdWdpblNldHRpbmdUYWIge1xuICAgIHBsdWdpbjogTWVtb3NTeW5jUGx1Z2luO1xuXG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHAsIHBsdWdpbjogTWVtb3NTeW5jUGx1Z2luKSB7XG4gICAgICAgIHN1cGVyKGFwcCwgcGx1Z2luKTtcbiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gICAgfVxuXG4gICAgZGlzcGxheSgpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgeyBjb250YWluZXJFbCB9ID0gdGhpcztcbiAgICAgICAgY29udGFpbmVyRWwuZW1wdHkoKTtcblxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdNZW1vcyBBUEkgVVJMJylcbiAgICAgICAgICAgIC5zZXREZXNjKCdFbnRlciB5b3VyIE1lbW9zIEFQSSBVUkwgKGUuZy4sIGh0dHBzOi8veW91ci1tZW1vcy1ob3N0L2FwaS92MSknKVxuICAgICAgICAgICAgLmFkZFRleHQodGV4dCA9PiB0ZXh0XG4gICAgICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKCdodHRwczovL3lvdXItbWVtb3MtaG9zdC9hcGkvdjEnKVxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5tZW1vc0FwaVVybClcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFx1OUE4Q1x1OEJDMVx1NUU3Nlx1NjgwN1x1NTFDNlx1NTMxNiBVUkwgXHU2ODNDXHU1RjBGXG4gICAgICAgICAgICAgICAgICAgIGxldCB1cmwgPSB2YWx1ZS50cmltKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1cmwgJiYgIXVybC5lbmRzV2l0aCgnL2FwaS92MScpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBcdTU5ODJcdTY3OUMgVVJMIFx1NjcyQlx1NUMzRVx1NkNBMVx1NjcwOSAvYXBpL3YxXHVGRjBDXHU4MUVBXHU1MkE4XHU2REZCXHU1MkEwXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmwgPSB1cmwucmVwbGFjZSgvXFwvPyQvLCAnL2FwaS92MScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dC5zZXRWYWx1ZSh1cmwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLm1lbW9zQXBpVXJsID0gdXJsO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAuc2V0TmFtZSgnTWVtb3MgQWNjZXNzIFRva2VuJylcbiAgICAgICAgICAgIC5zZXREZXNjKCdFbnRlciB5b3VyIE1lbW9zIEFjY2VzcyBUb2tlbicpXG4gICAgICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHRleHRcbiAgICAgICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoJ3lvdXItYWNjZXNzLXRva2VuJylcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MubWVtb3NBY2Nlc3NUb2tlbilcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLm1lbW9zQWNjZXNzVG9rZW4gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoJ1N5bmMgRGlyZWN0b3J5JylcbiAgICAgICAgICAgIC5zZXREZXNjKCdEaXJlY3Rvcnkgd2hlcmUgbWVtb3Mgd2lsbCBiZSBzeW5jZWQnKVxuICAgICAgICAgICAgLmFkZFRleHQodGV4dCA9PiB0ZXh0XG4gICAgICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKCdtZW1vcycpXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnN5bmNEaXJlY3RvcnkpXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5zeW5jRGlyZWN0b3J5ID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdTeW5jIEZyZXF1ZW5jeScpXG4gICAgICAgICAgICAuc2V0RGVzYygnQ2hvb3NlIGhvdyBvZnRlbiB0byBzeW5jJylcbiAgICAgICAgICAgIC5hZGREcm9wZG93bihkcm9wZG93biA9PiBkcm9wZG93blxuICAgICAgICAgICAgICAgIC5hZGRPcHRpb24oJ21hbnVhbCcsICdNYW51YWwnKVxuICAgICAgICAgICAgICAgIC5hZGRPcHRpb24oJ2F1dG8nLCAnQXV0b21hdGljJylcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Muc3luY0ZyZXF1ZW5jeSlcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlOiAnbWFudWFsJyB8ICdhdXRvJykgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5zeW5jRnJlcXVlbmN5ID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdBdXRvIFN5bmMgSW50ZXJ2YWwnKVxuICAgICAgICAgICAgLnNldERlc2MoJ0hvdyBvZnRlbiB0byBzeW5jIChpbiBtaW51dGVzKSB3aGVuIGF1dG8gc3luYyBpcyBlbmFibGVkJylcbiAgICAgICAgICAgIC5hZGRUZXh0KHRleHQgPT4gdGV4dFxuICAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcignMzAnKVxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZShTdHJpbmcodGhpcy5wbHVnaW4uc2V0dGluZ3MuYXV0b1N5bmNJbnRlcnZhbCkpXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBudW1WYWx1ZSA9IHBhcnNlSW50KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc05hTihudW1WYWx1ZSkgJiYgbnVtVmFsdWUgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5hdXRvU3luY0ludGVydmFsID0gbnVtVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICB9XG59XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsc0JBQXNFO0FBb0N0RSxJQUFNLG1CQUF3QztBQUFBLEVBQzFDLGFBQWE7QUFBQSxFQUNiLGtCQUFrQjtBQUFBLEVBQ2xCLGVBQWU7QUFBQSxFQUNmLGVBQWU7QUFBQSxFQUNmLGtCQUFrQjtBQUN0QjtBQUVBLElBQXFCLGtCQUFyQixjQUE2Qyx1QkFBTztBQUFBLEVBR2hELE1BQU0sU0FBUztBQUNYLFVBQU0sS0FBSyxhQUFhO0FBRXhCLFNBQUssY0FBYyxJQUFJLG9CQUFvQixLQUFLLEtBQUssSUFBSSxDQUFDO0FBRTFELFNBQUssY0FBYyxR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
